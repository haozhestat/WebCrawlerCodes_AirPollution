# The following code means if there is some errors happen, then go to next loop
res <- try(krige.conv(pm.t, locations=sp, krige=kriging),silent=TRUE)
if(inherits(res, "try-error"))
{
next
}
pred <- krige.conv(pm.t, locations=sp, krige=kriging)
# q1 <- kriging(coord.proj[,1],coord.proj[,2],as.numeric(pm.data[i,]))
# The image plot
# in image plot, you may set "zlim=" such that the corlour bar are the same
image.plot(sp1,sp2, (matrix((pred$predict),grid.num,grid.num)), horizontal =TRUE,zlim=c(min(pm.data),max(pm.data)),main=paste0("Ordinary kriging,"," ","T=",i))
# The 3D plot
# To show the points in the image plot
points(coord.proj[location_name=="beijing",1],coord.proj[location_name=="beijing",2])
coord<-coord.proj[location_name=="beijing",]
text(coord[1,1],coord[1,2],"BJ")
points(coord.proj[location_name=="tianjin",1],coord.proj[location_name=="tianjin",2])
coord<-coord.proj[location_name=="tianjin",]
text(coord[1,1],coord[1,2],"TJ")
points(coord.proj[location_name=="zhangjiakou",1],coord.proj[location_name=="zhangjiakou",2])
coord<-coord.proj[location_name=="zhangjiakou",]
text(coord[1,1],coord[1,2],"ZJK")
points(coord.proj[location_name=="shijiazhuang",1],coord.proj[location_name=="shijiazhuang",2])
coord<-coord.proj[location_name=="shijiazhuang",]
text(coord[1,1],coord[1,2],"SJZ")
points(coord.proj[location_name=="tangshan",1],coord.proj[location_name=="tangshan",2])
coord<-coord.proj[location_name=="tangshan",]
text(coord[1,1],coord[1,2],"TS")
points(coord.proj[location_name=="baoding",1],coord.proj[location_name=="baoding",2])
coord<-coord.proj[location_name=="baoding",]
text(coord[1,1],coord[1,2],"BD")
points(coord.proj[location_name=="xingtai",1],coord.proj[location_name=="xingtai",2])
coord<-coord.proj[location_name=="xingtai",]
text(coord[1,1],coord[1,2],"XT")
points(coord.proj[location_name=="qinhuangdao",1],coord.proj[location_name=="qinhuangdao",2])
coord<-coord.proj[location_name=="qinhuangdao",]
text(coord[1,1],coord[1,2],"QHD")
points(coord.proj[location_name=="cangzhou",1],coord.proj[location_name=="cangzhou",2])
coord<-coord.proj[location_name=="cangzhou",]
text(coord[1,1],coord[1,2],"CZ")
points(coord.proj[location_name=="hengshui",1],coord.proj[location_name=="hengshui",2])
coord<-coord.proj[location_name=="hengshui",]
text(coord[1,1],coord[1,2],"HS")
points(coord.proj[location_name=="jinan",1],coord.proj[location_name=="jinan",2])
coord<-coord.proj[location_name=="jinan",]
text(coord[1,1],coord[1,2],"JN")
points(coord.proj[location_name=="zibo",1],coord.proj[location_name=="zibo",2])
coord<-coord.proj[location_name=="zibo",]
text(coord[1,1],coord[1,2],"ZB")
dev.off()
}
location
?duplicate
coord.proj
location
cbind(location$longitude,location$latitude)
location$longitude
location
str(location)
distance
dim(location)[1]
24*17
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 7
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 7
pm.data <- matrix(NA, 407, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
i
location$weather_num[i]
weather_station$weather_num[j]
?paste0
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
i
location
location[73,]
location[730,]
location[73,]
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 7
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
i
location[86,]
data_temp[,weather_index]
data_temp[,weather_index]
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 7
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
i
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j]&i!=86)
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
location[86,]
date_0
date_1
date_1-date_0
data_temp<-data_temp[date_0:date_1,]
dim(data_temp)
dim(data_temp[,weather_index])
length(data_temp[,weather_index])
i=86
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
date_0
date_1
data_temp
c(1:dim(data_temp)[1])
(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))
year
month
i=86
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j]&i!=86)
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(location$weather_num[i]==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
j
date_0
date_1
head(data_temp)
data_tmp[461,]
data_temp[461,]
data_temp<-read.csv(data_temp_name)
head(data_temp)
data_temp<-read.csv(data_temp_name)
data_tmp[461,]
data_temp[461,]
date_0
date_1
data_temp[1,]
location$weather_num[i]
weather_station$weather_num[j]
location
i
location$weather_num[i]
str(location)
str(weather_station)
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(as.numeric(as.character(location$weather_num[i]))==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
i
j
dim(data_temp)
data_temp<-read.csv(data_temp_name)
dim(data_temp)
dim(pm.data)[2]
as.numeric(as.character(location$weather_num[i]))
i
location[86,]
data_temp_name
location
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 7
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(as.numeric(as.character(location$weather_num[i]))==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
ncol(pm.data)
correlation <- matrix(NA, ncol(pm.data), ncol(pm.data))
for(i in 1:ncol(pm.data)){
for(j in 1:ncol(pm.data)){
correlation[i,j]<- cor(pm.data[,i], pm.data[,j])
}
}
correlation
min(correlation)
write.csv(correlation,file="C:/Users/haozhe/Dropbox/projects/pm2.5/weather_kriging/temperature.csv")
###########################################################
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 8
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(as.numeric(as.character(location$weather_num[i]))==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
correlation <- matrix(NA, ncol(pm.data), ncol(pm.data))
for(i in 1:ncol(pm.data)){
for(j in 1:ncol(pm.data)){
correlation[i,j]<- cor(pm.data[,i], pm.data[,j])
}
}
write.csv(correlation,file="C:/Users/haozhe/Dropbox/projects/pm2.5/weather_kriging/pressure.csv")
min(correlation)
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 10
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(as.numeric(as.character(location$weather_num[i]))==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
correlation <- matrix(NA, ncol(pm.data), ncol(pm.data))
for(i in 1:ncol(pm.data)){
for(j in 1:ncol(pm.data)){
correlation[i,j]<- cor(pm.data[,i], pm.data[,j])
}
}
write.csv(correlation,file="C:/Users/haozhe/Dropbox/projects/pm2.5/weather_kriging/humidity.csv")
min(correlation)
year=2015
month=1
day_0=1
hour_0=0
day_1=17
hour_1=23
weather_index <- 12
pm.data <- matrix(NA, 408, dim(location)[1])  # The time length is 49
pm.data <- data.frame(pm.data)
colnames(pm.data) <- location$station_code
for(i in 1:dim(pm.data)[2])
{
for(j in 1:dim(weather_station)[1])
{
# From the weather_num to find the corresponding weather station for each Pm2.5 station
if(as.numeric(as.character(location$weather_num[i]))==weather_station$weather_num[j])
{
# Read the corresponding weather data
data_temp_name<-paste0(readdir,weather_station$province_code[j],"_",weather_station$city_name[j],".csv")
data_temp<-read.csv(data_temp_name)
# Find the weather data at the fixed time, if can not find, then shows NA
# Find the weather data in the time gap
date_0<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_0)&((data_temp$hour==hour_0))]
date_1<-c(1:dim(data_temp)[1])[(data_temp$year==year)&(data_temp$month==month)&(data_temp$day==day_1)&((data_temp$hour==hour_1))]
data_temp<-data_temp[date_0:date_1,]
# Find the corresponding weather variable
pm.data[,i]<-data_temp[,weather_index]
}
}
}
correlation <- matrix(NA, ncol(pm.data), ncol(pm.data))
for(i in 1:ncol(pm.data)){
for(j in 1:ncol(pm.data)){
correlation[i,j]<- cor(pm.data[,i], pm.data[,j])
}
}
write.csv(correlation,file="C:/Users/haozhe/Dropbox/projects/pm2.5/weather_kriging/wind_speed.csv")
min(correlation)
